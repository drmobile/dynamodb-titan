<?xml version="1.0" encoding="UTF-8"?>
<!--
Copyright 2014-2015 Amazon.com, Inc. or its affiliates. All Rights Reserved.
Portions copyright Titan: Distributed Graph Database - Copyright 2012 and onwards Aurelius.

Licensed under the Apache License, Version 2.0 (the "License").
You may not use this file except in compliance with the License.
A copy of the License is located at

http://aws.amazon.com/apache2.0

or in the "license" file accompanying this file. This file is distributed
on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
express or implied. See the License for the specific language governing
permissions and limitations under the License.

This file was adapted from the following file:
https://github.com/thinkaurelius/titan/blob/0.5.4/titan-dist/src/assembly/resources/conf/rexster-cassandra.xml
-->

<rexster>
    <http>
        <server-port>8182</server-port>
        <server-host>0.0.0.0</server-host>
        <base-uri>_BASE_URI_</base-uri>
        <web-root>public</web-root>
        <character-set>UTF-8</character-set>
        <enable-jmx>false</enable-jmx>
        <enable-doghouse>true</enable-doghouse>
        <max-post-size>2097152</max-post-size>
        <max-header-size>8192</max-header-size>
        <upload-timeout-millis>30000</upload-timeout-millis>
        <thread-pool>
            <worker>
                <core-size>16</core-size>
                <max-size>16</max-size>
            </worker>
            <kernal>
                <core-size>8</core-size>
                <max-size>8</max-size>
            </kernal>
        </thread-pool>
        <io-strategy>leader-follower</io-strategy>
    </http>
    <rexpro>
        <server-port>8184</server-port>
        <server-host>0.0.0.0</server-host>
        <session-max-idle>1790000</session-max-idle>
        <session-check-interval>3000000</session-check-interval>
        <connection-max-idle>180000</connection-max-idle>
        <connection-check-interval>3000000</connection-check-interval>
        <enable-jmx>false</enable-jmx>
        <thread-pool>
            <worker>
                <core-size>8</core-size>
                <max-size>8</max-size>
            </worker>
            <kernal>
                <core-size>4</core-size>
                <max-size>4</max-size>
            </kernal>
        </thread-pool>
        <io-strategy>leader-follower</io-strategy>
    </rexpro>
    <shutdown-port>8183</shutdown-port>
    <shutdown-host>127.0.0.1</shutdown-host>
    <script-engines>
        <script-engine>
            <name>gremlin-groovy</name>
            <reset-threshold>-1</reset-threshold>
            <init-scripts>config/init.groovy</init-scripts>
            <imports>com.tinkerpop.rexster.client.*,com.thinkaurelius.titan.example.GraphOfTheGodsFactory,com.amazon.titan.example.MarvelGraphFactory</imports>
            <static-imports>java.lang.Math.PI</static-imports>
        </script-engine>
    </script-engines>
    <security>
        <authentication>
            <type>none</type>
        </authentication>
    </security>
    <metrics>
        <reporter>
            <type>jmx</type>
        </reporter>
        <reporter>
            <type>http</type>
        </reporter>
    </metrics>
    <graphs>
        <graph>
            <graph-name>_GRAPH_NAME_</graph-name>
            <graph-type>com.thinkaurelius.titan.tinkerpop.rexster.TitanGraphConfiguration</graph-type>
            <graph-location>/tmp/titan</graph-location>
            <graph-read-only>false</graph-read-only>
            <properties>
                <!-- general Titan configuration -->
                <storage.setup-wait>60000</storage.setup-wait>
                <ids.block-size>100000</ids.block-size>
                <storage.buffer-size>1024</storage.buffer-size>
                <storage.backend>com.amazon.titan.diskstorage.dynamodb.DynamoDBStoreManager</storage.backend>

                <!-- Amazon DynamoDB Storage Backend for Titan configuration -->
                <storage.dynamodb.force-consistent-read>true</storage.dynamodb.force-consistent-read>
                <!-- should be the graph name rexster/graphs/graph/graph-name -->
                <storage.dynamodb.prefix>_GRAPH_NAME_</storage.dynamodb.prefix>
                <storage.dynamodb.metrics-prefix>d</storage.dynamodb.metrics-prefix>
                <storage.dynamodb.enable-parallel-scans>false</storage.dynamodb.enable-parallel-scans>
                <storage.dynamodb.max-self-throttled-retries>60</storage.dynamodb.max-self-throttled-retries>
                <storage.dynamodb.control-plane-rate>10</storage.dynamodb.control-plane-rate>

                <!-- DynamoDB client configuration: credentials -->
                <storage.dynamodb.client.credentials.class-name>com.amazonaws.auth.DefaultAWSCredentialsProviderChain</storage.dynamodb.client.credentials.class-name>
                <storage.dynamodb.client.credentials.constructor-args></storage.dynamodb.client.credentials.constructor-args>

                <!-- DynamoDB client configuration: endpoint (Below, set to DynamoDB Local as invoked by mvn test -Pstart-dynamodb-local).
                     You can change the endpoint to point to Production DynamoDB regions.) -->
                <storage.dynamodb.client.endpoint>_DYNAMODB_HOSTPORT_</storage.dynamodb.client.endpoint>

                <!-- max http connections - not recommended to use more than 250 connections in DynamoDB Local -->
                <storage.dynamodb.client.connection-max>250</storage.dynamodb.client.connection-max>
                <!-- turn off sdk retries -->
                <storage.dynamodb.client.retry-error-max>0</storage.dynamodb.client.retry-error-max>

                <!-- DynamoDB client configuration: thread pool -->
                <storage.dynamodb.client.executor.core-pool-size>25</storage.dynamodb.client.executor.core-pool-size>
                <!-- Do not need more threads in thread pool than the number of http connections -->
                <storage.dynamodb.client.executor.max-pool-size>250</storage.dynamodb.client.executor.max-pool-size>
                <storage.dynamodb.client.executor.keep-alive>60000</storage.dynamodb.client.executor.keep-alive>
                <storage.dynamodb.client.executor.max-concurrent-operations>4</storage.dynamodb.client.executor.max-concurrent-operations>
                <!-- should be at least as large as the storage.buffer-size -->
                <storage.dynamodb.client.executor.max-queue-length>1024</storage.dynamodb.client.executor.max-queue-length>

                <!-- 750 r/w CU result in provisioning the maximum equal numbers read and write Capacity Units that can
                     be set on one table before it is split into two or more partitions for IOPS. If you will have more than one Rexster server
                     accessing the same graph, you should set the read-rate and write-rate properties to values commensurately lower than the
                     read and write capacity of the backend tables.-->

                <storage.dynamodb.stores.edgestore.capacity-read>100</storage.dynamodb.stores.edgestore.capacity-read>
                <storage.dynamodb.stores.edgestore.capacity-write>400</storage.dynamodb.stores.edgestore.capacity-write>
                <storage.dynamodb.stores.edgestore.read-rate>200</storage.dynamodb.stores.edgestore.read-rate>
                <storage.dynamodb.stores.edgestore.write-rate>400</storage.dynamodb.stores.edgestore.write-rate>
                <storage.dynamodb.stores.edgestore.scan-limit>10000</storage.dynamodb.stores.edgestore.scan-limit>

                <storage.dynamodb.stores.graphindex.capacity-read>100</storage.dynamodb.stores.graphindex.capacity-read>
                <storage.dynamodb.stores.graphindex.capacity-write>400</storage.dynamodb.stores.graphindex.capacity-write>
                <storage.dynamodb.stores.graphindex.read-rate>200</storage.dynamodb.stores.graphindex.read-rate>
                <storage.dynamodb.stores.graphindex.write-rate>400</storage.dynamodb.stores.graphindex.write-rate>
                <storage.dynamodb.stores.graphindex.scan-limit>10000</storage.dynamodb.stores.graphindex.scan-limit>

                <storage.dynamodb.stores.systemlog.capacity-read>10</storage.dynamodb.stores.systemlog.capacity-read>
                <storage.dynamodb.stores.systemlog.capacity-write>10</storage.dynamodb.stores.systemlog.capacity-write>
                <storage.dynamodb.stores.systemlog.read-rate>20</storage.dynamodb.stores.systemlog.read-rate>
                <storage.dynamodb.stores.systemlog.write-rate>10</storage.dynamodb.stores.systemlog.write-rate>
                <storage.dynamodb.stores.systemlog.scan-limit>10000</storage.dynamodb.stores.systemlog.scan-limit>

                <storage.dynamodb.stores.titan_ids.capacity-read>10</storage.dynamodb.stores.titan_ids.capacity-read>
                <storage.dynamodb.stores.titan_ids.capacity-write>10</storage.dynamodb.stores.titan_ids.capacity-write>
                <storage.dynamodb.stores.titan_ids.read-rate>20</storage.dynamodb.stores.titan_ids.read-rate>
                <storage.dynamodb.stores.titan_ids.write-rate>10</storage.dynamodb.stores.titan_ids.write-rate>
                <storage.dynamodb.stores.titan_ids.scan-limit>10000</storage.dynamodb.stores.titan_ids.scan-limit>

                <storage.dynamodb.stores.system_properties.capacity-read>10</storage.dynamodb.stores.system_properties.capacity-read>
                <storage.dynamodb.stores.system_properties.capacity-write>10</storage.dynamodb.stores.system_properties.capacity-write>
                <storage.dynamodb.stores.system_properties.read-rate>20</storage.dynamodb.stores.system_properties.read-rate>
                <storage.dynamodb.stores.system_properties.write-rate>10</storage.dynamodb.stores.system_properties.write-rate>
                <storage.dynamodb.stores.system_properties.scan-limit>10000</storage.dynamodb.stores.system_properties.scan-limit>

                <storage.dynamodb.stores.txlog.capacity-read>10</storage.dynamodb.stores.txlog.capacity-read>
                <storage.dynamodb.stores.txlog.capacity-write>10</storage.dynamodb.stores.txlog.capacity-write>
                <storage.dynamodb.stores.txlog.read-rate>20</storage.dynamodb.stores.txlog.read-rate>
                <storage.dynamodb.stores.txlog.write-rate>10</storage.dynamodb.stores.txlog.write-rate>
                <storage.dynamodb.stores.txlog.scan-limit>10000</storage.dynamodb.stores.txlog.scan-limit>

                <!-- elasticsearch config that is required to run GraphOfTheGods -->
                <index.search.backend>elasticsearch</index.search.backend>
                <index.search.directory>/tmp/searchindex</index.search.directory>
                <index.search.elasticsearch.client-only>false</index.search.elasticsearch.client-only>
                <index.search.elasticsearch.local-mode>true</index.search.elasticsearch.local-mode>
                <index.search.elasticsearch.interface>NODE</index.search.elasticsearch.interface>
            </properties>
            <extensions>
                <allows>
                    <allow>tp:gremlin</allow>
                </allows>
            </extensions>
        </graph>
    </graphs>
</rexster>
